<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#
var platformXElement = XElement.Load(this.Host.ResolveAssemblyReference("$(ProjectDir)/Assets/Cabinet/Xml/Platform.xml"));
var platformQuery = from t in platformXElement.Elements("Platform") select t;
var languageXElement = XElement.Load(this.Host.ResolveAssemblyReference("$(ProjectDir)/Assets/Cabinet/Xml/Language.xml"));
var languageQuery = from t in languageXElement.Elements("Language") select t;
var defaultLanguageQuery = from t in languageXElement.Elements("DefaultLanguage") select t;
var stepXElement = XElement.Load(this.Host.ResolveAssemblyReference("$(ProjectDir)/Assets/Cabinet/Xml/Step.xml"));
var stepQuery = from t in stepXElement.Elements("Step") select t;
var defaultStepQuery = from t in stepXElement.Elements("DefaultStep") select t;
#>
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using Zara.Common.ExAssetBundle;
using System;
using Zara.Common.ExAssetBundle.Editor;

namespace Zara.Expansion.ExAssetBundle.Editor
{
    public partial class AssetBundleMenuItem
    {<#
        foreach (var t in platformQuery)
        {
            string name = t.Attribute("name").Value;
        #>
        
        [MenuItem(MenuDirPath + "Build/<#= name #>")]
        static void BuildFor<#= name #>()
        {
            Build(BuildTarget.<#= name #>);
        }
        <#
        }#>

        static TagConditionSet CreateLanguageTagConditionSet()
        {
            return new BranchTagConditionSet(
                10,
                new BranchTagCondition[]
                {
                    <#
                    foreach (var t in defaultLanguageQuery)
                    {
                        string name = t.Attribute("name").Value;
                    #>new BranchTagCondition("", "[<#= name #>]"),
                    <#
                    } 
                    foreach (var t in languageQuery)
                    {
                        string name = t.Attribute("name").Value;
                    #>new BranchTagCondition("<#= name #>", "[<#= name #>]"),<#
                    }#>

                });
        }

        static TagConditionSet CreateStepTagConditionSet()
        {
            return new StepTagConditionSet(
                20,
                new StepTagCondition[]
                {
                    <#
                    foreach (var t in stepQuery)
                    {
                        string name = t.Attribute("name").Value;
                        string step = t.Attribute("step").Value;
                    #>new StepTagCondition("<#= name #>", "[<#= name #>]", <#= step #>),
                    <#
                    }
                    foreach (var t in defaultStepQuery)
                    {
                        string step = t.Attribute("step").Value;
                    #>new StepTagCondition("", "", <#= step #>),<#
                    }#>

                });
        }
    }
}
