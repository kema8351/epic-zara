<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#
var languageXElement = XElement.Load(this.Host.ResolveAssemblyReference("$(ProjectDir)/Assets/Cabinet/Xml/Language.xml"));
var languageQuery = from t in languageXElement.Elements("Language") select t;
var defaultLanguageQuery = from t in languageXElement.Elements("DefaultLanguage") select t;
var stepXElement = XElement.Load(this.Host.ResolveAssemblyReference("$(ProjectDir)/Assets/Cabinet/Xml/Step.xml"));
var stepQuery = from t in stepXElement.Elements("Step") select t;
var defaultStepQuery = from t in stepXElement.Elements("DefaultStep") select t;
#>
using UnityEngine;
using Zara.Common.ExBase;

namespace Zara.Expansion.ExAssetBundle
{
    public partial class AssetCaller : ExMonoBehaviour
    {
        string GetStepPart(AssetStep step)
        {
            switch (step)
            {
                <#
                foreach (var t in stepQuery)
                {
                    string name = t.Attribute("name").Value;
                    string full = char.ToUpper(name[0]) + name.Substring(1);
                #>case AssetStep.<#= full #>: return "[<#= name #>]";
                <#
                }
                foreach (var t in defaultStepQuery)
                {
                    string name = t.Attribute("name").Value;
                    string full = char.ToUpper(name[0]) + name.Substring(1);
                #>case AssetStep.<#= full #>: return "";
                <#
                }
                #>default:
                    Debug.LogError($"unknown asset step: {step}");
                    return "";
            }
        }

        string GetLanguagePart(AssetLanguage language)
        {
            switch (language)
            {
                <#
                foreach (var t in defaultLanguageQuery)
                {
                    string name = t.Attribute("name").Value;
                    string full = t.Attribute("full").Value;
                #>case AssetLanguage.<#= full #>: return "[<#= name #>]";
                <#
                }
                foreach (var t in languageQuery)
                {
                    string name = t.Attribute("name").Value;
                    string full = t.Attribute("full").Value;
                #>case AssetLanguage.<#= full #>: return "[<#= name #>]";
                <#
                }
                #>default:
                    Debug.LogError($"unknown asset language: {language}");
                    return "";
            }
        }
    }

    public enum AssetStep
    {
        <#
        foreach (var t in stepQuery)
        {
            string name = t.Attribute("name").Value;
            string full = char.ToUpper(name[0]) + name.Substring(1);
        #><#= full #>,
        <#
        }
        foreach (var t in defaultStepQuery)
        {
            string name = t.Attribute("name").Value;
            string full = char.ToUpper(name[0]) + name.Substring(1);
        #><#= full #>,<#
        } #>

    }

    public enum AssetLanguage
    {
        <#
        foreach (var t in defaultLanguageQuery)
        {
            string full = t.Attribute("full").Value;
        #><#= full #>,
        <#
        }
        foreach (var t in languageQuery)
        {
            string full = t.Attribute("full").Value;
        #><#= full #>,<#
        } #>

    }
}
